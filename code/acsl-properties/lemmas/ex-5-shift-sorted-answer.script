(* Generated by Frama-C WP *)

Goal typed_lemma_in_array_shifted.
Hint in_array_shifted,property.
Proof.
  intros len shift value M2 M1 array tM2 tM1 tvalue In Shifted.
  inversion In as [ loc HIn ].
  inversion HIn as [ Hcell Hrange ].
  exists (loc + shift)%Z ; split ; [|omega].
  replace (shift_sint32 array (loc + shift))
     with (shift_sint32 (shift_sint32 array loc) shift).
  - rewrite <- Shifted ; try omega.
    replace (shift_sint32 (shift_sint32 array loc) 0)%Z
       with (shift_sint32 array loc)%Z.
    + assumption.
    + unfold shift_sint32 ; unfold Memory.shift ; simpl.
      replace (offset array + loc + 0)%Z with (offset array + loc)%Z by omega.
      reflexivity.
  - unfold shift_sint32 ; unfold Memory.shift ; simpl.
    replace (offset array + loc + shift)%Z
       with (offset array + (loc + shift))%Z by omega.
    reflexivity.
Qed.

Goal typed_lemma_shifted_still_sorted.
Hint property,shifted_still_sorted.
Proof.
  intros len shift M1 M2 array tM1 tM2 Sorted Shifted.
  unfold P_shifted in Shifted.
  intros i j ; intros.
  assert(Hi: exists pi, i = shift + pi) by (exists (i - shift) ; omega).
  assert(Hj: exists pj, j = shift + pj) by (exists (j - shift) ; omega).
  inversion_clear Hi as [ pi Hi' ].
  inversion_clear Hj as [ pj Hj' ].
  rewrite Hi' ; rewrite Hj' .
  unfold P_shifted_cell in Shifted.
  unfold shift_sint32 in * .
  unfold Memory.shift in * .
  simpl in * ; simpl.
  subst.
  replace (offset array + (shift + pi)) with (offset array + pi + shift) by omega.
  replace (offset array + (shift + pj)) with (offset array + pj + shift) by omega.
  repeat rewrite <- Shifted by omega.
  replace (offset array + pi + 0)%Z with (offset array + pi)%Z by omega.
  replace (offset array + pj + 0)%Z with (offset array + pj)%Z by omega.
  apply Sorted ; omega.
Qed.


